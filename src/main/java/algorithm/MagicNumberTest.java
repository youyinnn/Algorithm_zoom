package algorithm;

import org.junit.Test;

/**
 * @author youyinnn
 * Date 9/3/2018
 */
public class MagicNumberTest {

    /**
     * newcoder:
     *  https://www.nowcoder.com/questionTerminal/f2976b694c5a4a6497b1d7886894fcdd
     */
    @Test
    public void test(){
        int[] test = new int[]{1, 2, 3, 4, 5};
        int[] test2 = new int[]{0,3,5,8,9,11,12,14,17,18,19,22,25,28,30,33,35,36,38,40,43,46,49,52,55,57,59,60,62,64,66,68,69,72,73,75,78,80,83,86,89,91,94,96,99,102,105,106,109,110,112,115,118,120,122,123,124,125,128,131,134,136,137,139,142,144,146,149,150,153,154,156,158,161,164,165,168,171,174,177,180,182,183,186,188,190,191,193,194,195,197,199,201,204,206,208,210,213,216,218,221,223,225,226,228,229,232,234,237,240,242,245,246,248,250,253,256,259,261,262,264,267,268,271,272,275,278,279,280,283,286,287,290,291,292,295,296,297,298,301,302,304,307,308,311,313,314,315,318,320,322,325,327,329,332,334,336,337,340,343,345,347,350,353,355,356,359,361,364,367,369,370,373,376,378,379,380,383,385,386,387,390,393,395,397,400,403,405,407,408,411,413,416,418,420,421,424,425,428,430,431,433,434,437,439,441,444,446,449,450,451,453,454,457,458,461,464,465,466,467,468,469,470,473,474,475,478,481,483,486,487,489,492,494,497,500,501,502,504,505,508,511,512,515,518,519,522,523,524,527,528,530,531,532,533,534,535,538,540,542,543,544,546,549,551,552,553,555,557,559,561,564,567,568,571,573,574,577,580,581,582,584,586,588,589,590,593,594,595,597,598,599,601,602,603,605,606,608,610,611,614,616,617,618,620,623,625,628,629,631,633,636,638,641,644,646,648,651,653,654,657,659,661,662,663,665,668,669,670,673,676,678,680,683,685,686,689,692,695,697,700,702,705,706,709,712,715,718,719,721,723,725};
        System.out.println(findMagicIndex(test, test.length));
        System.out.println(findMagicIndex(test2, test2.length));
    }

    private boolean findMagicIndex(int[] A, int n) {
        int left = 0;
        int right = n - 1;
        int mid;
        while (left < right) {
            mid = (right + left) >>> 1;
            if (mid == A[mid] || right == A[right] || left == A[left]) {
                return true;
            } else if (mid < A[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;
    }
}
